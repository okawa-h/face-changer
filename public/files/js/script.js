// Generated by Haxe 3.4.7
(function () { "use strict";
var ClmTrackerTools = function() {
};
ClmTrackerTools.__name__ = true;
var Mask = function(posiList) {
	this.positionMap = new haxe_ds_StringMap();
	var v = [posiList[19],posiList[20],posiList[21],posiList[22]];
	var _this = this.positionMap;
	if(__map_reserved["eyebrowsLeft"] != null) {
		_this.setReserved("eyebrowsLeft",v);
	} else {
		_this.h["eyebrowsLeft"] = v;
	}
	var v1 = [posiList[18],posiList[17],posiList[16],posiList[15]];
	var _this1 = this.positionMap;
	if(__map_reserved["eyebrowsRight"] != null) {
		_this1.setReserved("eyebrowsRight",v1);
	} else {
		_this1.h["eyebrowsRight"] = v1;
	}
	var v2 = [posiList[23],posiList[63],posiList[24],posiList[64],posiList[25],posiList[65],posiList[26],posiList[66],posiList[27]];
	var _this2 = this.positionMap;
	if(__map_reserved["eyeFrameLeft"] != null) {
		_this2.setReserved("eyeFrameLeft",v2);
	} else {
		_this2.h["eyeFrameLeft"] = v2;
	}
	var v3 = [posiList[27]];
	var _this3 = this.positionMap;
	if(__map_reserved["eyeLeft"] != null) {
		_this3.setReserved("eyeLeft",v3);
	} else {
		_this3.h["eyeLeft"] = v3;
	}
	var v4 = [posiList[30],posiList[68],posiList[29],posiList[67],posiList[28],posiList[70],posiList[31],posiList[69],posiList[32]];
	var _this4 = this.positionMap;
	if(__map_reserved["eyeFrameRight"] != null) {
		_this4.setReserved("eyeFrameRight",v4);
	} else {
		_this4.h["eyeFrameRight"] = v4;
	}
	var v5 = [posiList[32]];
	var _this5 = this.positionMap;
	if(__map_reserved["eyeRight"] != null) {
		_this5.setReserved("eyeRight",v5);
	} else {
		_this5.h["eyeRight"] = v5;
	}
	var v6 = [posiList[0],posiList[1],posiList[2],posiList[3],posiList[4],posiList[5],posiList[6],posiList[7],posiList[8],posiList[9],posiList[10],posiList[11],posiList[12],posiList[13],posiList[14],posiList[15],posiList[16],posiList[17],posiList[18],posiList[22],posiList[21],posiList[20],posiList[19]];
	var _this6 = this.positionMap;
	if(__map_reserved["outline"] != null) {
		_this6.setReserved("outline",v6);
	} else {
		_this6.h["outline"] = v6;
	}
};
Mask.__name__ = true;
Mask.prototype = {
	get: function(key) {
		var _this = this.positionMap;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			var _this1 = this.positionMap;
			if(__map_reserved[key] != null) {
				return _this1.getReserved(key);
			} else {
				return _this1.h[key];
			}
		} else {
			return null;
		}
	}
};
var DeviceCamera = function() { };
DeviceCamera.__name__ = true;
DeviceCamera.init = function(callback) {
	DeviceCamera._video = window.document.createElement("video");
	DeviceCamera._video.autoplay = true;
	DeviceCamera._video.setAttribute("playsinline","true");
	DeviceCamera._video.style.opacity = "0";
};
DeviceCamera.getVideo = function() {
	return DeviceCamera._video;
};
DeviceCamera.access = function(callback) {
	var onSuccess = function(stream) {
		DeviceCamera._video.onloadedmetadata = function(event) {
			callback();
		};
		DeviceCamera._video.srcObject = stream;
	};
	var onError = function(message) {
		js_Browser.alert(message);
	};
	navigator.getUserMedia({ audio : false, video : { facingMode : "user"}},onSuccess,onError);
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
Lambda.__name__ = true;
Lambda.count = function(it,pred) {
	var n = 0;
	if(pred == null) {
		var _ = $iterator(it)();
		while(_.hasNext()) {
			var _1 = _.next();
			++n;
		}
	} else {
		var x = $iterator(it)();
		while(x.hasNext()) {
			var x1 = x.next();
			if(pred(x1)) {
				++n;
			}
		}
	}
	return n;
};
var Log = function() { };
Log.__name__ = true;
Log.init = function() {
	Log._parent = window.document.getElementById("log");
};
Log.say = function(message) {
	Log._parent.textContent = message;
};
var Main = function() { };
Main.__name__ = true;
Main.main = function() {
	window.addEventListener("DOMContentLoaded",Main.init);
};
Main.init = function() {
	Log.init();
	DeviceCamera.init();
	Log.say("Initialize...");
	Main.setup();
	Main._ctrack = new clm.tracker();
	Material.init(function() {
		Main.load();
	});
};
Main.setup = function() {
	Main._image = window.document.createElement("canvas");
	Main._wireframe = window.document.createElement("canvas");
	Main._board = window.document.getElementById("board");
	Main._board.appendChild(Main._image);
	Main._board.appendChild(Main._wireframe);
	Main._board.appendChild(DeviceCamera.getVideo());
};
Main.load = function() {
	Log.say("Analyze...");
	DeviceCamera.access(function() {
		Main.start(DeviceCamera.getVideo());
	});
};
Main.start = function(video) {
	var width = Main._image.width = Main._wireframe.width = video.videoWidth;
	var height = Main._image.height = Main._wireframe.height = video.videoHeight;
	Main._board.style.width = width + "px";
	Main._board.style.height = height + "px";
	Main.update();
	Log.say("Success");
	Main._ctrack.reset();
	Main._ctrack.init(pModel);
	Main._ctrack.start(Main._image);
};
Main.update = function(timeStamp) {
	Main._requestAnimation = window.requestAnimationFrame(Main.update);
	Main._image.getContext("2d",null).drawImage(DeviceCamera.getVideo(),0,0);
	Main.clear(Main._wireframe);
	if(Main._ctrack.getCurrentPosition()) {
		var mask = new Mask(Main._ctrack.getCurrentPosition());
		var wireframeCtx = Main._wireframe.getContext("2d",null);
		var SIZE_RATIO = 5;
		var leftEyeImage = Material.getImage("leftEye");
		var leftPosiYList = [];
		var _g = 0;
		var _g1 = mask.get("eyeFrameLeft");
		while(_g < _g1.length) {
			var posi = _g1[_g];
			++_g;
			leftPosiYList.push(posi[1]);
		}
		var leftPosiY = Main.getMaxMin(leftPosiYList);
		var heightL = (leftPosiY.max - leftPosiY.min) * SIZE_RATIO;
		var ratioL = heightL / leftEyeImage.height;
		var eyeLW = leftEyeImage.width * ratioL;
		var eyeL = mask.get("eyeLeft")[0];
		wireframeCtx.drawImage(leftEyeImage,eyeL[0] - eyeLW * .5,eyeL[1] - heightL * .5,eyeLW,heightL);
		var rightEyeImage = Material.getImage("rightEye");
		var rightPosiYList = [];
		var _g2 = 0;
		var _g11 = mask.get("eyeFrameRight");
		while(_g2 < _g11.length) {
			var posi1 = _g11[_g2];
			++_g2;
			rightPosiYList.push(posi1[1]);
		}
		var rightPosiY = Main.getMaxMin(rightPosiYList);
		var heightR = (rightPosiY.max - rightPosiY.min) * SIZE_RATIO;
		var ratioR = heightR / rightEyeImage.height;
		var eyeRW = rightEyeImage.width * ratioR;
		var eyeR = mask.get("eyeRight")[0];
		wireframeCtx.drawImage(rightEyeImage,eyeR[0] - eyeRW * .5,eyeR[1] - heightR * .5,eyeRW,heightR);
	}
};
Main.getMaxMin = function(array) {
	var min = array[0];
	var max = min;
	var _g = 0;
	while(_g < array.length) {
		var value = array[_g];
		++_g;
		min = Math.min(min,value);
		max = Math.max(max,value);
	}
	return { max : max, min : min};
};
Main.clear = function(canvas) {
	canvas.getContext("2d",null).clearRect(0,0,canvas.width,canvas.height);
};
Main.onClmtrackrConverged = function() {
	window.document.removeEventListener("clmtrackrConverged",Main.onClmtrackrConverged);
	window.document.removeEventListener("clmtrackrLost",Main.onClmtrackrLost);
	Log.say("Success");
	window.cancelAnimationFrame(Main._requestAnimation);
};
Main.onClmtrackrLost = function() {
	window.document.removeEventListener("clmtrackrConverged",Main.onClmtrackrConverged);
	window.document.removeEventListener("clmtrackrLost",Main.onClmtrackrLost);
	Log.say("Not found");
	window.cancelAnimationFrame(Main._requestAnimation);
	Main._ctrack.stop();
};
var Material = function() { };
Material.__name__ = true;
Material.init = function(callback) {
	Material._data = new haxe_ds_StringMap();
	Material.loadMaterial(callback);
};
Material.loadMaterial = function(callback) {
	var length = Lambda.count(Material.SOURCE_LIST);
	var counter = 0;
	var timer = new haxe_Timer(10);
	timer.run = function() {
		if(length <= counter) {
			timer.stop();
			callback();
		}
	};
	var key = Material.SOURCE_LIST.keys();
	while(key.hasNext()) {
		var key1 = key.next();
		var key2 = [key1];
		var image = [new Image()];
		image[0].onload = (function(image1,key3) {
			return function() {
				var _this = Material._data;
				if(__map_reserved[key3[0]] != null) {
					_this.setReserved(key3[0],image1[0]);
				} else {
					_this.h[key3[0]] = image1[0];
				}
				counter += 1;
			};
		})(image,key2);
		var _this1 = Material.SOURCE_LIST;
		var tmp = __map_reserved[key2[0]] != null ? _this1.getReserved(key2[0]) : _this1.h[key2[0]];
		image[0].src = tmp;
	}
};
Material.getImage = function(key) {
	var _this = Material._data;
	if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
		var _this1 = Material._data;
		if(__map_reserved[key] != null) {
			return _this1.getReserved(key);
		} else {
			return _this1.h[key];
		}
	} else {
		return null;
	}
};
Math.__name__ = true;
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = true;
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
haxe_ds__$StringMap_StringMapIterator.__name__ = true;
haxe_ds__$StringMap_StringMapIterator.prototype = {
	hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,iterator: function() {
		return new haxe_ds__$StringMap_StringMapIterator(this,this.arrayKeys());
	}
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var js_Browser = function() { };
js_Browser.__name__ = true;
js_Browser.alert = function(v) {
	window.alert(js_Boot.__string_rec(v,""));
};
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.__name__ = true;
Array.__name__ = true;
var __map_reserved = {};
Material.SOURCE_LIST = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	if(__map_reserved["leftEye"] != null) {
		_g.setReserved("leftEye","files/img/left.png");
	} else {
		_g.h["leftEye"] = "files/img/left.png";
	}
	if(__map_reserved["rightEye"] != null) {
		_g.setReserved("rightEye","files/img/right.png");
	} else {
		_g.h["rightEye"] = "files/img/right.png";
	}
	$r = _g;
	return $r;
}(this));
Main.main();
})();
