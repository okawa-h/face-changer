// Generated by Haxe 3.4.7
(function () { "use strict";
var Main = function() { };
Main.__name__ = true;
Main.main = function() {
	window.addEventListener("DOMContentLoaded",Main.init);
};
Main.init = function() {
	Main._leftEye = new Image();
	Main._leftEye.onload = function() {
	};
	Main._leftEye.src = "files/img/left.png";
	Main._rightEye = new Image();
	Main._rightEye.onload = function() {
	};
	Main._rightEye.src = "files/img/right.png";
	Main._log = window.document.getElementById("log");
	Main.setup();
	Main._ctrack = new clm.tracker();
	Main._video.style.display = "none";
	var cache = Math.random() * 100 * Math.random();
	Main.loadVideo("files/video/video.mp4?" + cache);
	Main._input = window.document.querySelector("[data-js=\"inputimage\"]");
	Main._input.addEventListener("change",Main.onChange);
};
Main.onChange = function(event) {
	window.cancelAnimationFrame(Main._requestAnimation);
	window.document.removeEventListener("clmtrackrConverged",Main.onClmtrackrConverged);
	window.document.removeEventListener("clmtrackrLost",Main.onClmtrackrLost);
	Main._ctrack.stop();
	Main.clearCanvas(Main._image);
	Main.clearCanvas(Main._wireframe);
	var reader = new FileReader();
	reader.onload = function() {
		Main.loadImage(reader.result);
	};
	var tmp = Main._input.files.item(0);
	reader.readAsDataURL(tmp);
};
Main.setup = function() {
	Main._image = window.document.createElement("canvas");
	Main._wireframe = window.document.createElement("canvas");
	Main._video = window.document.createElement("video");
	Main._board = window.document.getElementById("board");
	Main._video.autoplay = true;
	Main._video.loop = true;
	Main._video.setAttribute("playsinline","true");
	Main._board.appendChild(Main._image);
	Main._board.appendChild(Main._wireframe);
	Main._board.appendChild(Main._video);
};
Main.loop = function(timeStamp) {
	Main._requestAnimation = window.requestAnimationFrame(Main.loop);
	Main._image.getContext("2d",null).drawImage(Main._video,0,0);
	Main.clearCanvas(Main._wireframe);
	if(Main._ctrack.getCurrentPosition()) {
		var posiList = Main._ctrack.getCurrentPosition();
		var leftEyebrows_0 = posiList[19];
		var leftEyebrows_1 = posiList[20];
		var leftEyebrows_2 = posiList[21];
		var leftEyebrows_3 = posiList[22];
		var rightEyebrows_0 = posiList[18];
		var rightEyebrows_1 = posiList[17];
		var rightEyebrows_2 = posiList[16];
		var rightEyebrows_3 = posiList[15];
		var leftEye = [posiList[23],posiList[63],posiList[24],posiList[64],posiList[25],posiList[65],posiList[26],posiList[66],posiList[27]];
		var rightEye = [posiList[30],posiList[68],posiList[29],posiList[67],posiList[28],posiList[70],posiList[31],posiList[69],posiList[32]];
		var outline_0 = posiList[0];
		var outline_1 = posiList[1];
		var outline_2 = posiList[2];
		var outline_3 = posiList[3];
		var outline_4 = posiList[4];
		var outline_5 = posiList[5];
		var outline_6 = posiList[6];
		var outline_7 = posiList[7];
		var outline_8 = posiList[8];
		var outline_9 = posiList[9];
		var outline_10 = posiList[10];
		var outline_11 = posiList[11];
		var outline_12 = posiList[12];
		var outline_13 = posiList[13];
		var outline_14 = posiList[14];
		var outline_15 = posiList[15];
		var outline_16 = posiList[16];
		var outline_17 = posiList[17];
		var outline_18 = posiList[18];
		var outline_19 = posiList[22];
		var outline_20 = posiList[21];
		var outline_21 = posiList[20];
		var outline_22 = posiList[19];
		var ctx = Main._wireframe.getContext("2d",null);
		var SIZE_RATIO = 5;
		var posiYList = [];
		var _g = 0;
		while(_g < leftEye.length) {
			var posi = leftEye[_g];
			++_g;
			posiYList.push(posi[1]);
		}
		var posiY = Main.getMaxMin(posiYList);
		var height = (posiY.max - posiY.min) * SIZE_RATIO;
		var ratio = height / Main._leftEye.height;
		var rightEyeW = Main._leftEye.width * ratio;
		ctx.drawImage(Main._leftEye,posiList[27][0] - rightEyeW * .5,posiList[27][1] - height * .5,rightEyeW,height);
		var posiYList1 = [];
		var _g1 = 0;
		while(_g1 < rightEye.length) {
			var posi1 = rightEye[_g1];
			++_g1;
			posiYList1.push(posi1[1]);
		}
		var posiY1 = Main.getMaxMin(posiYList1);
		var height1 = (posiY1.max - posiY1.min) * SIZE_RATIO;
		var ratio1 = height1 / Main._rightEye.height;
		var rightEyeW1 = Main._rightEye.width * ratio1;
		ctx.drawImage(Main._rightEye,posiList[32][0] - rightEyeW1 * .5,posiList[32][1] - height1 * .5,rightEyeW1,height1);
	}
};
Main.getMaxMin = function(array) {
	var min = array[0];
	var max = array[0];
	var _g = 0;
	while(_g < array.length) {
		var target = array[_g];
		++_g;
		min = Math.min(min,target);
		max = Math.max(max,target);
	}
	return { max : max, min : min};
};
Main.loadImage = function(src) {
	Main.log("Analyze...");
	var image = new Image();
	image.onload = function() {
		Main.draw(image);
	};
	image.src = src;
};
Main.loadVideo = function(src) {
	Main.log("Analyze...");
	var constraints = { video : true, audio : false};
	var getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;
	var tmp = window.navigator;
	getUserMedia.call(tmp,constraints,function(stream) {
		Main._video.onloadedmetadata = function() {
			Main.drawVideo(Main._video);
		};
		Main._video.src = URL.createObjectURL(stream);
		Main._video.load();
	},function(event) {
		js_Browser.alert(event.name + " : " + event.message);
	});
};
Main.draw = function(image) {
	var width = Main._image.width = Main._wireframe.width = image.width;
	var height = Main._image.height = Main._wireframe.height = image.height;
	Main._board.style.width = width + "px";
	Main._board.style.height = height + "px";
	Main._image.getContext("2d",null).drawImage(image,0,0,width,height);
	Main.loop();
	window.document.addEventListener("clmtrackrConverged",Main.onClmtrackrConverged);
	window.document.addEventListener("clmtrackrLost",Main.onClmtrackrLost);
	Main._ctrack.reset();
	Main._ctrack.init(pModel);
	Main._ctrack.start(Main._image);
};
Main.drawVideo = function(video) {
	var width = Main._image.width = Main._wireframe.width = video.videoWidth;
	var height = Main._image.height = Main._wireframe.height = video.videoHeight;
	Main._board.style.width = width + "px";
	Main._board.style.height = height + "px";
	Main._image.getContext("2d",null).drawImage(video,0,0);
	Main.loop();
	Main._ctrack.reset();
	Main._ctrack.init(pModel);
	Main._ctrack.start(Main._image);
};
Main.clearCanvas = function(canvas) {
	canvas.getContext("2d",null).clearRect(0,0,canvas.width,canvas.height);
};
Main.onClmtrackrConverged = function() {
	window.document.removeEventListener("clmtrackrConverged",Main.onClmtrackrConverged);
	window.document.removeEventListener("clmtrackrLost",Main.onClmtrackrLost);
	Main.log("Success");
	window.cancelAnimationFrame(Main._requestAnimation);
};
Main.onClmtrackrLost = function() {
	window.document.removeEventListener("clmtrackrConverged",Main.onClmtrackrConverged);
	window.document.removeEventListener("clmtrackrLost",Main.onClmtrackrLost);
	Main.log("Not found");
	window.cancelAnimationFrame(Main._requestAnimation);
	Main._ctrack.stop();
};
Main.log = function(message) {
	Main._log.textContent = message;
};
Math.__name__ = true;
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var js_Browser = function() { };
js_Browser.__name__ = true;
js_Browser.alert = function(v) {
	window.alert(js_Boot.__string_rec(v,""));
};
String.__name__ = true;
Array.__name__ = true;
Main.main();
})();
